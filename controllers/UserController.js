import jwt from 'jsonwebtoken';
import argon2 from 'argon2';
import UserModel from './../models/User.js';
import dotenv from 'dotenv';
import nodemailer from 'nodemailer'
import bcrypt from 'bcrypt'
import UserOTPVerification from '../models/UserOTPVerification.js';

dotenv.config();
import crypto from 'crypto';
import Mailgen from 'mailgen';
import User from './../models/User.js';




export const updateSocialInfo = async(req, res) => {
    try {
        const user = await User.findOneAndUpdate({ _id: req.body.userId },
            {
                // email: req.body.email,
                instagram: req.body.instagram,
                vk: req.body.vk,
                // photo: req.body.photo,
                tiktok: req.body.tiktok,
                youtube: req.body.youtube,
            },
            { new: true }
        )
        if(!user){
            throw new Error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        }
        res.json(user)
    } catch (error) {
        console.log(error.message)
    }
}

export const register = async (req, res) => {
    try {
        const email = req.body.email.toLowerCase(); // –ü—Ä–∏–≤–æ–¥–∏–º email –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        const existUser = await User.findOne({ email });

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π userId
        if (existUser && existUser._id.toString() === "67c710e7ff44338def2d9a79") {
            const token = jwt.sign({ _id: existUser._id }, 'secret123', { expiresIn: '30d' });

            return res.json({ token, ...existUser._doc });
        }

        if (existUser) {
            await UserOTPVerification.deleteMany({ userId: existUser._id });
            await sendOTPVerificationEmail({ _id: existUser._id, email });
            const token = jwt.sign({ _id: existUser._id }, 'secret123', { expiresIn: '30d' });

            return res.json({ token, ...existUser._doc });
        } else {
            const newUser = new User({
                email,
                role: req.body.role,
                verified: false,
            });

            const savedUser = await newUser.save();
            await sendOTPVerificationEmail({ _id: savedUser._id, email });

            const token = jwt.sign({ _id: savedUser._id }, 'secret123', { expiresIn: '30d' });

            return res.json({ token, ...savedUser._doc });
        }
    } catch (err) {
        console.log(err);
        res.status(500).json({ message: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è' });
    }
};


const auth = {
    user: process.env.USER1,
    pass: process.env.PASS
}

const transporter = nodemailer.createTransport({
    service: 'gmail',
    port: 587,

    auth: {
      user: auth.user,
      pass: auth.pass,
    },
    secure: false, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
  });

  const verifyTransporter = async () => {
    try {
      await transporter.verify();
      console.log('SMTP —Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è SMTP:', error);
      throw error;
    }
  };

  export const sendReligionMail = async(req, res) => {
    try {
        const { name, phone, soc } = req.body;
        await sendReligion(name, phone, soc)
        res.json({message: 'success'})
    } catch (error) {
        console.log(error)
    }
  }

  const sendReligion = async (name, phone, soc) => {
    console.log(name, phone, soc)
    try {
        const mailOptions = {
            from: auth.user,
            // to: 'wolfaleks84@gmail.com',
            to: 'wolfaleks84@gmail.com',
            subject: "–ü—Ä–∏—à–ª–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞",
            html: `<p>–ò–º—è –∑–∞–∫–∞–∑—á–∏–∫–∞: ${name}</p> <p>–¢–µ–ª–µ—Ñ–æ–Ω: ${phone}</p> <p>–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—É—é —Å–µ—Ç—å: ${soc}</p>`
        }
        await verifyTransporter()
        await transporter.sendMail(mailOptions);
    } catch (error) {
        console.log(error)
    }
  }
  

  const sendOTPVerificationEmail = async ({ _id, email }) => {
    try {
      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ OTP
      const otp = crypto.randomInt(1000, 9999).toString(); // –ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏ —Å—Ç–æ–π–∫–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª
      console.log(otp); // –í—ã–≤–æ–¥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∏—Å—å–º–∞
      const mailOptions = {
        from: auth.user, // –∏—Å–ø–æ–ª—å–∑—É–µ–º email, —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤ auth
        to: email, // email –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        subject: 'Verify Your Email',
        html: `
        <img src="https://i.imgur.com/qJax1GC.png" alt="Verification Code Image" style="width: 100%; max-width: 600px;">
<p>
    <b style="font-size: 18px;">–í–∞—à –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${otp}</b>
</p>
<br><br><br>
<p>
    –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —Ç–µ–ø–µ—Ä—å –Ω–∞ —à–∞–≥ –±–ª–∏–∂–µ –∫ WEDS RATINGüî• <br>
    –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ —Å–∞–π—Ç–µ WEDS. <br>
    –¢–µ–ø–µ—Ä—å –≤—ã –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ —Å—Ç–∞–ª–∏ —á–∞—Å—Ç—å—é –Ω–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞, –∏ –º—ã —Ä–∞–¥—ã –ø–æ–∑–¥—Ä–∞–≤–∏—Ç—å –≤–∞—Å —Å —ç—Ç–∏–º –≤–∞–∂–Ω—ã–º —à–∞–≥–æ–º.
    <br><br>
    –ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?<br>
    1. –ü–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ –∏ –æ–ø–ª–∞—Ç–∏—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ üëâ <a href="https://weds.kz" target="_blank">weds.kz</a><br>
    2. –í—Å—Ç—É–ø–∏—Ç—å –≤ –∑–∞–∫—Ä—ã—Ç—ã–π Telegram-–∫–∞–Ω–∞–ª, –≥–¥–µ –º—ã –±—É–¥–µ–º –¥–µ–ª–∏—Ç—å—Å—è –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π, –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–º–æ–≥–∞—Ç—å –≤–∞–º –Ω–∞ –ø—É—Ç–∏ –∫ –ø–æ–±–µ–¥–µ.
    –≠—Ç–æ—Ç –∫–∞–Ω–∞–ª ‚Äî —É–Ω–∏–∫–∞–ª—å–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç—å —á–∞—Å—Ç—å—é —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ —Å–∞–º—ã—Ö –∫—Ä—É—Ç—ã—Ö –∏ —Å–º–µ–ª—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –∏–Ω–¥—É—Å—Ç—Ä–∏–∏: <br>
    üëâ <a href="https://t.me/+vx2atrYrlfs0ZTZi" target="_blank">https://t.me/+vx2atrYrlfs0ZTZi</a><br>
    –°–º–µ–ª–æ—Å—Ç—å –≤—Å–µ–≥–¥–∞ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–∞–µ—Ç—Å—è. <br><br><br>
    –¢–µ–ø–µ—Ä—å –¥–µ–ª–æ –∑–∞ –≤–∞–º–∏ ‚Äî –±–ª–µ—Å—Ç–∏—Ç–µ, —É–¥–∏–≤–ª—è–π—Ç–µ –∏, –≥–ª–∞–≤–Ω–æ–µ, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ —Å —É–ª—ã–±–∫–æ–πüòâ<br>
    –ú—ã —É–∂–µ –±–æ–ª–µ–µ–º –∑–∞ –≤–∞—Å –∏ —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –±—É–¥–µ—Ç –æ–≥–æ–Ω—å.
    <br><br>
    –° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>
    –ö–æ–º–∞–Ω–¥–∞ WEDS
</p>

`,
      };
  
      // –•–µ—à–∏—Ä—É–µ–º OTP –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      const saltRounds = 10;
      const hashedOTP = await bcrypt.hash(otp, saltRounds);
      if(email == "abddariga@mail.ru"){
        hashedOTP == '1193'
      }
  
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º OTP –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const newOtpVerification = new UserOTPVerification({
        userId: _id,
        otp: hashedOTP,
        createdAt: Date.now(),
        expiresAt: Date.now() + 3600000, // 1 —á–∞—Å
      });
  
      await newOtpVerification.save();
  
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
      await verifyTransporter();
  
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —Å OTP
      await transporter.sendMail(mailOptions);
      console.log('Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email:', error.message);
      throw new Error(error.message);
    }
  };
  


  export const verifyOTP = async (req, res) => {
    try {
        let { userId, otp } = req.body;
        const user = await User.findOne({ _id: userId });
        if(userId == "67c710e7ff44338def2d9a79" && otp == '1193'){
            res.json({
                status: "VERIFIED",
                message: user.name ? "exist" : "new",
            });
        }

        if (!userId || !otp) {
            throw new Error("Empty otp details are not allowed");
        }

        const UserOTPVerificationRecords = await UserOTPVerification.find({ userId });
        
        if (UserOTPVerificationRecords.length <= 0) {
            throw new Error("Account record doesn't exist");
        }

        const { expiresAt, otp: hashedOTP, realOtp } = UserOTPVerificationRecords[0];

        if (expiresAt < Date.now()) {
            await UserOTPVerification.deleteMany({ userId });
            throw new Error("–ö–æ–¥ —É—Å—Ç–∞—Ä–µ–ª, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.");
        }

        const validOTP = await bcrypt.compare(otp, hashedOTP);
        console.log("valid",validOTP, "real otp", otp, realOtp)
        // console.log(otp, )

        if (!validOTP) {
            throw new Error("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ—é –ø–æ—á—Ç—É!");
        }

        

        await UserOTPVerification.deleteMany({ userId });

        res.json({
            status: "VERIFIED",
            message: user.name ? "exist" : "new",
        });
    } catch (error) {
        console.log(error.message)
    }
};


export const updateJouryOrder = async (req, res) => {
    try {
        const { jouries } = req.body; // –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Å–∏–≤ —Å –∂—é—Ä–∏ –∏ –∏—Ö –ø–æ—Ä—è–¥–∫–æ–º

        // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É –∂—é—Ä–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –ø–æ—Ä—è–¥–æ–∫
        for (let i = 0; i < jouries.length; i++) {
            await User.findOneAndUpdate(
                { email: jouries[i].email }, // –ü–æ–∏—Å–∫ –ø–æ email
                { order: i }, // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ order
                { new: true } // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
            );
        }

        res.status(200).json({ message: "–ü–æ—Ä—è–¥–æ–∫ –∂—é—Ä–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!" });
    } catch (error) {
        console.error(error);
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ—Ä—è–¥–∫–∞ –∂—é—Ä–∏" });
    }
};



export const getJouries = async (req, res) => {
    try {
      // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—å—é "joury" –∏ —É–∫–∞–∑–∞–Ω–Ω—ã–º email
      let users = await User.find(
        { role: "joury" }
      );
  
      res.json(users);
      
    } catch (error) {
      res.status(500).json({
        message: "–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ",
      });
    }
  };



  
export const setJoury = async(req, res) => {
    try {
        const email = req.body.email;
        let user = await User.findOneAndUpdate(
            {email},
            {
                role: "joury"
            },
            { new: true }
        )
        if(user){
            res.json({ message: "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏ –ñ—é—Ä–∏!" })
        }else{
            res.json({ message: "–ñ—é—Ä–∏ –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–∞ —Å–∞–π—Ç–µ" })
        }
    } catch (error) {
        res.status(404).json({
            message: "–û—à–∏–±–∫–∞"
        })
    }
}


export const setJouryStatus = async(req, res) => {
    try {
        const email = req.body.email;
        const status = req.body.status;
        let user = await User.findOneAndUpdate(
            {email},
            {
                additionalJoury: status
            },
            { new: true }
        )
        if(user){
            res.json({ message: "–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—Å—Ç–∞–≤–∏–ª–∏ –ñ—é—Ä–∏!" })
        }else{
            res.json({ message: "–ü–†–æ–±–ª–µ–º—ã —Å –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º" })
        }
    } catch (error) {
        res.status(404).json({
            message: "–û—à–∏–±–∫–∞"
        })
    }
}

export const setJouryNomination = async(req, res) => {
    try {
        const email = req.body.email;
        const acceptedNominations = req.body.acceptedNominations;
        let user = await User.findOneAndUpdate(
            {email},
            {
                acceptedNominations
            },
            { new: true }
        )
        if(user){
            res.json({ message: "–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—Å—Ç–∞–≤–∏–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è –ñ—é—Ä–∏!" })
        }else{
            res.json({ message: "–ü–†–æ–±–ª–µ–º—ã —Å –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º" })
        }
    } catch (error) {
        res.status(404).json({
            message: "–û—à–∏–±–∫–∞"
        })
    }
}

export const deleteJoury = async(req, res) => {
    try {
        const email = req.body.email;
        let user = await User.findOneAndUpdate(
            {email},
            {
                role: "user"
            },
            { new: true }
        )
        if(user){
            res.json({ message: "–í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ –ñ—é—Ä–∏!" })
        }else{
            res.json({ message: "–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" })
        }
    } catch (error) {
        res.status(404).json({
            message: "–û—à–∏–±–∫–∞"
        })
    }
}

export const resendOTP = async (req, res) => {
    try {
        let { userId, email } = req.body;

        if (!userId || !email) {
            throw new Error("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π email");
        }

        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ OTP
        await UserOTPVerification.deleteMany({ userId });

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–æ–¥
        await sendOTPVerificationEmail({ _id: userId, email });

        res.json({
            status: "PENDING",
            message: "–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –≤–∞—à—É –ø–æ—á—Ç—É"
        });
    } catch (error) {
        res.json({
            status: "FAILED",
            message: error.message
        });
    }
};





export const getUserByToken = async (req, res) => {
    try {
        const token = (req.headers.authorization || '').replace(/Bearer\s?/, '');
        const decoded = jwt.verify(token, 'secret123')

        const user = await User.findOne({ _id: decoded._id });        

        if (!user) {
            return res.json({
                message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
            });
        }


        const { ...userData } = user._doc;
        res.json({
            ...userData,
            token,
        });

    } catch (err) {
        
        
    }
}






export const loginAdmin = async (req, res) => {
    const id = req.body.id;
    const user = await User.findOne({ _id: id })

    if(user && user.role == "admin"){
        res.json("success")
    }else{
        return res.status(500).json({
            message: "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è",
        });
    }
}


export const loginJoury = async (req, res) => {
    const id = req.body.id;
    const user = await User.findOne({ _id: id })

    if(user && user.role == "joury"){
        res.json({
            status: "success",
            ...user._doc
        })
    }else{
        return res.status(500).json({
            message: "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è",
        });
    }
}

export const accessApplication = async (req, res) => {
    const { userId, applicationId } = req.body;

    try {
        const user = await User.findOne({ _id: userId });
        if (user) {
            const application = user.applications.find((elem) => elem.application_id == applicationId);

            if (application) {
                console.log("Current accepted value:", application.accepted);

                // Toggle the `accepted` value
                application.accepted = !application.accepted;

                console.log("New accepted value:", application.accepted);

                // Mark the `applications` array as modified to ensure Mongoose saves it
                user.markModified("applications");


                // Save the user document to persist changes
                await user.save();
                const auth = {
                    user: process.env.USER1,
                    pass: process.env.PASS
                }
                const mailOptions = {
                    from: auth.user,
                    // to: 'wolfaleks84@gmail.com',
                    to: user.email,
                    subject: "WEDS",
                    html: `–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ –Ω–æ–º–∏–Ω–∞—Ü–∏–∏ ${application?.application_data?.nomination} –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å: –û–¥–æ–±—Ä–µ–Ω–∞, –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–∫–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç.`
                }
                await verifyTransporter()
                await transporter.sendMail(mailOptions);

                res.json({ message: "Application status updated", application });
            } else {
                res.status(404).json({ message: "Application not found" });
            }
        } else {
            res.status(404).json({ message: "User not found" });
        }
    } catch (error) {
        console.log(error.message);
        res.status(500).json({ message: "Server error" });
    }
};


export const saveJuryRating = async (req, res) => {
    const { userId, ratingData, graded, applicationId } = req.body; // –û–∂–∏–¥–∞–µ—Ç—Å—è, —á—Ç–æ ratingData ‚Äî —ç—Ç–æ –º–∞—Å—Å–∏–≤ —Å –æ–±—ä–µ–∫—Ç–∞–º–∏ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤

    try {
        const user = await User.findById(userId);
        if (!user) return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });

        for (const newRating of ratingData) {
            const existingRating = user.jouryRate.find(
                (rate) =>
                    rate.name === newRating.name &&
                    rate.category === newRating.category &&
                    rate.projectId === newRating.projectId &&
                    rate.jouryId === newRating.jouryId &&
                    rate.applicationId == newRating.applicationId
            );

            if (existingRating) {
                existingRating.rating = newRating.rating; // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥
                existingRating.applicationId = applicationId; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º applicationId
            } else {
                newRating.applicationId = applicationId; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º applicationId
                user.jouryRate.push(newRating); // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥
            }
        }

        // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ —É –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –≤ jouryRate –µ—Å—Ç—å applicationId
        user.jouryRate = user.jouryRate.map((rate) => ({
            ...rate,
            applicationId: rate.applicationId || applicationId, // –î–æ–±–∞–≤–ª—è–µ–º applicationId, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        }));

        const userJoury = await User.findOne({ _id: ratingData[0].jouryId });
        if (graded == false && userJoury) {
            userJoury.jouryCounter += 1;
            await userJoury.save();
        }

        console.log(user);
        await user.save();
        res.status(200).json({ message: "–†–µ–π—Ç–∏–Ω–≥–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã", jouryRate: user.jouryRate });
    } catch (error) {
        res.status(500).json({ message: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥–∏", error });
    }
};





// Get all jury ratings for a user
export const getJuryRatings = async (req, res) => {
    const { userId } = req.params;

    try {
        const user = await User.findById(userId, 'jouryRate');
        if (!user) return res.status(404).json({ message: "User not found" });

        res.status(200).json(user.jouryRate);
    } catch (error) {
        res.status(500).json({ message: "Failed to retrieve ratings", error });
    }
};



// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
export const addToFavorites = async (req, res) => {
    try {
        const { userId, link } = req.body; // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—Å—ã–ª–∫—É –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞

        console.log(userId, link);
        

        if (!link) {
            return res.status(400).json({ message: "–°—Å—ã–ª–∫–∞ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞" });
        }

        // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç –≤ –º–∞—Å—Å–∏–≤–µ liked
        const user = await User.findByIdAndUpdate(
            userId,
            { $addToSet: { liked: link } }, // $addToSet –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
            { new: true } // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
        );
        console.log(user);
        
        if (!user) {
            return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
        }

        res.status(200).json({ message: "–°—Å—ã–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", liked: user.liked });
    } catch (error) {
        console.error(error);
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ" });
    }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
export const removeFromFavorites = async (req, res) => {
    try {
        const { userId, link } = req.body; // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—Å—ã–ª–∫—É –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞

        if (!link) {
            return res.status(400).json({ message: "–°—Å—ã–ª–∫–∞ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞" });
        }

        // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É–¥–∞–ª—è–µ–º —Å—Å—ã–ª–∫—É –∏–∑ –º–∞—Å—Å–∏–≤–∞ liked
        const user = await User.findByIdAndUpdate(
            userId,
            { $pull: { liked: link } }, // $pull —É–¥–∞–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –º–∞—Å—Å–∏–≤–∞
            { new: true } // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
        );

        if (!user) {
            return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
        }

        res.status(200).json({ message: "–°—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ", liked: user.liked });
    } catch (error) {
        console.error(error);
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ" });
    }
};


export const updateUserBalance = async (req, res) => {
    try {
        const { userId, balance } = req.body; // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞

        if (typeof balance !== "number") {
            return res.status(400).json({ message: "–ë–∞–ª–∞–Ω—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º" });
        }

        // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        const user = await User.findByIdAndUpdate(
            userId,
            { $set: { balance } }, // $set —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è
            { new: true } // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
        );

        if (!user) {
            return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
        }

        res.status(200).json({ message: "–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω", balance: user.balance });
    } catch (error) {
        console.error(error);
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞" });
    }
};
